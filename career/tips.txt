Arraylist 与 LinkedList 区别
1.是否保证线程安全: ArrayList 和 LinkedList 都是不同步的,也就是不保证线程安全
2.底层数据结构: Arraylist 底层使⽤的是 Object 数组； LinkedList 底层使⽤的是双
3.ArrayList 采⽤数组存储,所以插⼊和删除复杂度就是O(1),在指定位置 i 插⼊和删除元素的话复杂度就为 O(n-i)
4.LinkedList 采⽤链表存储在指定位置 i 插⼊和删除元素复杂度近似为 o(n)因为需要先移动到指定位置再插⼊
5.ArrayList 实现了 RandomAccess 接⼝, ⽽ LinkedList 没有实现。
6.实现了 RandomAccess 接⼝的list,优先选择普通 for 循环 ,其次 foreach,
	未实现 RandomAccess 接⼝的list,优先选择iterator遍历（foreach遍历底层也是通过
	iterator实现的,）,⼤size的数据,千万不要使⽤普通for循环
7.Vector 类的所有⽅法都是同步的

HashMap 和 Hashtable 的区别
1.HashMap 是⾮线程安全的,HashTable 是线程安全的HashTable 基本被淘汰,不要在代码中使⽤它
2.HashMap 中 null 可以作为键,这样的键只有⼀个,在 HashTable 中 put null直接抛出 NullPointerException
3.JDK1.8 以后的 HashMap链表⻓度⼤于阈值（默认为8）时,将链表转化为红⿊树,以减少搜索时间。
红⿊树就是为了解决⼆叉查找树的缺陷,因为⼆叉查找树在某些情况下会退化成⼀个线性结构

ConcurrentHashMap 和 Hashtable 的区别
1.JDK1.7的 ConcurrentHashMap 底层采⽤ 分段的数组+链表 实现,JDK1.8 采⽤
	的数据结构跟HashMap1.8的结构⼀样,数组+链表/红⿊⼆叉树以减少搜索时间。
2.在JDK1.7的时候,ConcurrentHashMap（分段锁） 对整个桶数组进⾏了分割分段(Segment),
	每⼀把锁只锁容器其中⼀部分数据,多线程访问容器⾥不同数据段的数据,就不会存在锁竞争,提⾼并发访问率
3. JDK1.8 的时候已经摒弃了Segment的概念,⽽是直接⽤ Node 数组+链表+红⿊树
	的数据结构来实现,并发控制使⽤ synchronized 和CAS 来操作
4. Hashtable(同⼀把锁)使⽤ synchronized 来保证线程安全,效率⾮常低下

ConcurrentHashMap线程安全的具体实现⽅式:Java8在链表⻓度超过⼀定阈值（8）
	时将链表转换为红⿊树,synchronized只锁定当前链表或红⿊⼆叉树的⾸节点,
	这样只要hash不冲突,就不会产⽣并发,效率提升
synchronized 关键字加到 static 静态⽅法和 synchronized(class)代码块上都是是给 Class
	类上锁。synchronized 关键字加到实例⽅法上是给对象实例上锁。

说说 sleep() ⽅法和 wait() ⽅法区别和共同点
1.两者最主要的区别在于：sleep ⽅法没有释放锁,⽽ wait ⽅法释放了锁 。
2.两者都可以暂停线程的执⾏。
3.Wait 通常被⽤于线程间交互/通信,sleep 通常被⽤于暂停执⾏。
4.wait() ⽅法被调⽤后,线程不会⾃动苏醒,需要别的线程调⽤同⼀个对象上的 notify() 或者
notifyAll() ⽅法。sleep() ⽅法执⾏完成后,线程会⾃动苏醒。或者可以使⽤ wait(long
timeout)超时后线程会⾃动苏醒。

synchronized和ReentrantLock 的区别
1.两者都是可重⼊锁:“可重⼊锁”概念是：⾃⼰可以再次获取⾃⼰的内部锁。⽐如⼀个线程获得了某个对
	象的锁,此时这个对象锁还没有释放,当其再次想要获取这个对象的锁的时候还是可以获取的,如果不
	可锁重⼊的话,就会造成死锁。同⼀个线程每次获取锁,锁的计数器都⾃增1,所以要等到锁的计数器
	下降为0时才能释放锁。
2.synchronized 依赖于 JVM ⽽ ReentrantLock 依赖于 API
3.相⽐synchronized,ReentrantLock增加了①等待可中断；
	②可实现公平锁；③可实现选择性通知

实现Runnable接⼝和Callable接⼝的区别
Runnable 接⼝不会返回结果或抛出检查异常,但是 Callable 接⼝可以。

执⾏execute()⽅法和submit()⽅法的区别是什么
1.execute() ⽅法⽤于提交不需要返回值的任务,所以⽆法判断任务是否被线程池执⾏成功与否；
2.submit() ⽅法⽤于提交需要返回值的任务。线程池会返回⼀个 Future 类型的对象,通过这个
	Future 对象可以判断任务是否执⾏成功,并且可以通过 Future 的 get() ⽅法来获取返回值,
	get() ⽅法会阻塞当前线程直到任务完成,⽽使⽤ get（long timeout,TimeUnit unit） ⽅
	法则会阻塞当前线程⼀段时间后⽴即返回,这时候有可能任务没有执⾏完。

既然你已经有nginx做⽹关了，为什么还要⽤gateWay
1.nginx是做负载均衡，还有针对客户端的访问做⽹关⽤的
2.gateWay是接⼊业务层做的⽹关，⽽且还整合了熔断器Hystrix

Java乐观锁通过CAS实现，悲观锁通过synchronize实现
mysql乐观锁通过MVCC，也就是版本实现，悲观锁可以通过select... for update加上排它锁

MySQL中存储引擎InnoDB和MyISAM有什么区别
myisam是mysql的默认数据库引擎,5.5版以后更多使用InnoDB，
InnoDB和MyISAM是许多人在使用MySQL时最常用的两个表类型，
基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。
MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，
但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。
如果是读多写少的系统，建议选择myisam


dubbo的负载均衡策略，主体向外暴露出来是一个接口，名字叫做loadBlace
Random LoadBalance：随机选取提供者策略，随机转发请求，可以加权
RoundRobin LoadBalance：轮循选取提供者策略，请求平均分布
LeastActive LoadBalance：最少活跃调用策略，可以让慢提供者接收更少的请求
ConstantHash LoadBalance：一致性 Hash 策略，相同参数请求总是发到同一提供者，一台机器宕机，可以基于虚拟节点，分摊至其他提供者


CountDownLatch是一个同步工具类，用来协调多个线程之间的同步
CountDownLatch能够使一个线程在等待另外一些线程完成各自工作之后，再继续执行。
使用一个计数器进行实现。计数器初始值为线程的数量。当每一个线程完成自己任务后，
计数器的值就会减一。当计数器的值为0时，表示所有的线程都已经完成一些任务，
然后在CountDownLatch上等待的线程就可以恢复执行接下来的任务。CountDownLatch是一次性的，
计算器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，
当CountDownLatch使用完毕后，它不能再次被使用。
某一线程在开始运行前等待n个线程执行完毕。将CountDownLatch的计数器初始化为new CountDownLatch(n)，
每当一个任务线程执行完毕，就将计数器减1 countdownLatch.countDown()，
当计数器的值变为0时，在CountDownLatch上await()的线程就会被唤醒。
一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。

JVM调优目的:减小响应时间、提高吞吐量

Nacos:作为配置中心是CP作为注册中心是AP
	健康检查:临时节点心跳注册(微服务)，持久化节点tcp、http探测(mysql)
	数据隔离:User、NameSpace、Group、Service



Kafka:高性能、RocketMQ:业务性、RabbitMQ:高可靠